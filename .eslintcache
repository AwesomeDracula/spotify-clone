[{"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\index.js":"1","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\App.js":"2","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Player.js":"4","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\contextapi\\DataLayer.js":"5","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\login\\Login.js":"6","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Sidebar.js":"7","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Body.js":"8","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Footer.js":"9","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\spotifyapi\\Spotify.js":"10","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\SongRow.js":"11","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Header.js":"12","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\SidebarOption.js":"13","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\reducer\\reducer.js":"14","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\UserAccount.js":"15","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Home.js":"16","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Search.js":"17","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Collection.js":"18","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\HeaderSearchBar.js":"19","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\CollectionHeader.js":"20","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Playlists.js":"21","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Albums.js":"22","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Artists.js":"23","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Podcasts.js":"24"},{"size":735,"mtime":1611589353352,"results":"25","hashOfConfig":"26"},{"size":2206,"mtime":1612189922204,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":1585,"mtime":1612009305676,"results":"29","hashOfConfig":"26"},{"size":392,"mtime":1611454518558,"results":"30","hashOfConfig":"26"},{"size":383,"mtime":1611454701604,"results":"31","hashOfConfig":"26"},{"size":2077,"mtime":1612007658412,"results":"32","hashOfConfig":"26"},{"size":1499,"mtime":1612175097677,"results":"33","hashOfConfig":"26"},{"size":2397,"mtime":1612175029227,"results":"34","hashOfConfig":"26"},{"size":911,"mtime":1612194205004,"results":"35","hashOfConfig":"26"},{"size":942,"mtime":1612187515404,"results":"36","hashOfConfig":"26"},{"size":361,"mtime":1612022914181,"results":"37","hashOfConfig":"26"},{"size":339,"mtime":1611742683104,"results":"38","hashOfConfig":"26"},{"size":2880,"mtime":1612189881972,"results":"39","hashOfConfig":"26"},{"size":1558,"mtime":1612194213196,"results":"40","hashOfConfig":"26"},{"size":1485,"mtime":1612190987518,"results":"41","hashOfConfig":"26"},{"size":7346,"mtime":1612174466791,"results":"42","hashOfConfig":"26"},{"size":1358,"mtime":1611918202582,"results":"43","hashOfConfig":"26"},{"size":1832,"mtime":1612112897493,"results":"44","hashOfConfig":"26"},{"size":1152,"mtime":1611762155780,"results":"45","hashOfConfig":"26"},{"size":1517,"mtime":1612008144579,"results":"46","hashOfConfig":"26"},{"size":1426,"mtime":1611921576881,"results":"47","hashOfConfig":"26"},{"size":1484,"mtime":1612109251952,"results":"48","hashOfConfig":"26"},{"size":1386,"mtime":1611921616240,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1j2zofr",{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\index.js",[],["110","111"],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\App.js",["112","113","114","115","116","117"],"import { useEffect ,useState} from 'react';\nimport './App.css';\nimport Login from './login/Login';\nimport Player from './components/Player';\nimport { getTokenFromUrl } from './spotifyapi/Spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport {useDataLayerValue} from './contextapi/DataLayer';\n\nconst spotifyApi = new SpotifyWebApi();\n\nfunction App() {\n  // const [token, setToken] = useState(null);\n  const [{user, playlists, token, saved_album, searchResponse}, dispatch] = useDataLayerValue();\n  // console.log(useDataLayerValue());\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const _token = hash.access_token;\n    if(_token){\n      dispatch({\n        type: 'SET_TOKEN',\n        token: _token\n      });\n      // setToken(_token);\n\n      spotifyApi.setAccessToken(_token);\n      spotifyApi.getMe().then(user => {\n        dispatch({\n          type: 'SET_USER',\n          user: user\n        });\n      });\n\n      spotifyApi.getUserPlaylists().then((playlists) => {\n        dispatch({\n          type: 'SET_PLAYLISTS',\n          playlists: playlists\n        });\n      });\n\n      spotifyApi.getPlaylist(\"3SzuSFG2e1a2sSPqWuohYu\").then(response => {\n        dispatch({\n          type: 'SET_CURRENT_PLAYLIST',\n          current_playlist: response\n        })\n      });\n\n      spotifyApi.getMySavedAlbums().then(response => {\n        dispatch({\n            type: 'SET_SAVED_ALBUM',\n            saved_album: response\n        })\n      });\n\n      spotifyApi.getFollowedArtists().then(response => {\n        dispatch({\n          type: 'SET_FOLLOWED_ARTISTS',\n          followed_artists: response\n        })\n      });\n\n      spotifyApi.getMySavedShows().then(response => {\n        dispatch({\n          type: 'SET_PODCASTS',\n          podcasts: response\n        })\n      });\n\n      spotifyApi.getNewReleases().then(response => {\n        dispatch({\n          type: 'SET_NEW_RELEASES',\n          newReleases: response\n        })\n      })\n    }\n  }, []);\n\n  return (\n    <div className=\"app\">\n        {\n          token ? (\n            <Player spotifyApi={spotifyApi}/>\n          ) : (\n            <Login />\n          )\n        }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Player.js",["118"],"import React from 'react';\r\nimport \"./Player.css\";\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport Sidebar from './Sidebar';\r\nimport Body from './Body';\r\nimport Home from './Home';\r\nimport Search from './Search';\r\nimport Footer from './Footer';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Collection from './Collection';\r\n\r\nfunction Player({spotifyApi}) {\r\n    const [{playlists}, dispatch] = useDataLayerValue();\r\n    return (\r\n        <Router>\r\n            <div className=\"player\">\r\n                <div className='player-body'>\r\n                \r\n                    <Sidebar spotifyApi={spotifyApi}/>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact>\r\n                            <Home />\r\n                        </Route>\r\n                        <Route path=\"/search\">\r\n                            <Search spotifyApi={spotifyApi}/>\r\n                        </Route>\r\n                        <Route path=\"/collection\" >\r\n                            <Collection />\r\n                        </Route>\r\n                        {playlists?.items?.map(playlist => (\r\n                            <Route path={\"/playlist/\"+playlist.name.replace(/\\s/g,'')}>\r\n                                <Body spotifyApi={spotifyApi}/>\r\n                            </Route>\r\n                        ))}\r\n                    </Switch>\r\n                </div>\r\n                <div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Player\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\contextapi\\DataLayer.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\login\\Login.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Sidebar.js",["119"],"import React from 'react'\r\nimport \"./Sidebar.css\";\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nfunction Sidebar({spotifyApi}) {\r\n    const [{playlists, current_playlist}, dispatch] = useDataLayerValue();\r\n\r\n    const playlistOnClicked = (playlistId) => {\r\n        spotifyApi.getPlaylist(playlistId).then(response => {\r\n            dispatch({\r\n              type: 'SET_CURRENT_PLAYLIST',\r\n              current_playlist: response\r\n            })\r\n          })\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <img className=\"sidebar-logo\" src='https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg' alt='' />\r\n            <NavLink exact to=\"/\" activeClassName=\"selected\">\r\n                <SidebarOption title='Trang chủ' Icon={HomeIcon} />\r\n            </NavLink>\r\n            <NavLink to=\"/search\" activeClassName=\"selected\">\r\n                <SidebarOption title='Tìm kiếm' Icon={SearchIcon} />\r\n            </NavLink>\r\n            <NavLink to=\"/collection\" activeClassName=\"selected\">\r\n                <SidebarOption title='Thư viện' Icon={LibraryMusicIcon} />\r\n            </NavLink>\r\n            <br />\r\n            <strong className=\"sidebar-title\">PLAYLIST</strong>\r\n            <hr />\r\n            {/* {console.log(\"I have this playplist:\",playlists)} */}\r\n            <div className=\"userPlaylists\">\r\n                {playlists?.items?.map(playlist => (\r\n                    <div onClick={() => playlistOnClicked(playlist.id)}>\r\n                        <Link to={\"/playlist/\"+playlist.name.replace(/\\s/g,'')} >\r\n                            <SidebarOption title={playlist.name} />\r\n                        </Link>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Body.js",["120"],"import React from 'react'\r\nimport \"./Body.css\";\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport Header from './Header';\r\nimport SongRow from './SongRow';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\nfunction Body({spotifyApi}) {\r\n    const [{current_playlist}, dispatch] = useDataLayerValue();\r\n    return (\r\n        <div className=\"body\">\r\n            <Header/>\r\n\r\n            <div className=\"body-info\">\r\n                <img src={current_playlist?.images[0].url} alt=\"\" />\r\n                <div className=\"body-infoText\">\r\n                    {/* {console.log(current_playlist)} */}\r\n                    <strong>PLAYLIST</strong>\r\n                    <h2>{current_playlist?.name}</h2>\r\n                    <p>{current_playlist?.description}</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"body-songs\">\r\n                <div className=\"body-icons\">\r\n                    <PlayCircleFilledIcon className=\"body-shuffle\" color=\"green\" />\r\n                    <FavoriteIcon fontSize=\"large\" />\r\n                    <MoreHorizIcon />\r\n                </div>\r\n                {/* List of songs */}\r\n                {current_playlist?.tracks.items.map(item => (\r\n                    <SongRow track={item.track} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Footer.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\spotifyapi\\Spotify.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\SongRow.js",["121"],"import React from 'react';\r\nimport './SongRow.css';\r\nimport {useDataLayerValue} from '../contextapi/DataLayer';\r\n\r\nfunction SongRow({track}) {\r\n    const [{playingTrack}, dispatch] = useDataLayerValue();\r\n    const handleSongClicked = (event) => {\r\n        dispatch({\r\n            type: 'SET_TRACK',\r\n            playingTrack: {\r\n                src: track.album.images[2].url,\r\n                name: track.name,\r\n                singer: track.artists.map(artist => artist.name).join(\", \")\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"songrow\" onClick={handleSongClicked}>\r\n            <img className=\"songrow-album\" src={track.album.images[2].url} alt=\"\" />\r\n            <div className=\"songrow-info\">\r\n                <h1>{track.name}</h1>\r\n                <p>{track.artists.map(artist => artist.name).join(\", \")} - {track.album.name}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongRow\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Header.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\SidebarOption.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\reducer\\reducer.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\UserAccount.js",["122","123"],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Home.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Search.js",["124","125","126","127","128","129"],"import React from 'react';\r\nimport './Search.css';\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport Header from './Header';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n  } from \"reactstrap\";\r\n\r\nfunction Search({spotifyApi}) {\r\n    const [\r\n        {\r\n            searchTermIsExisted,\r\n            currentAlbumSearchResult,\r\n            currentArtistSearchResult,\r\n            currentPlaylistSearchResult,\r\n            currentTrackSearchResult,\r\n            currentShowSearchResult,\r\n            currentEpisodeSearchResult\r\n        }] = useDataLayerValue();\r\n    return (\r\n        <div className=\"search\">\r\n            <Header spotifyApi={spotifyApi}/>\r\n            {searchTermIsExisted && <Container fluid={true} >\r\n                {console.log(currentTrackSearchResult)}\r\n                {currentTrackSearchResult?.total > 0 && <h4>Bài hát</h4>}\r\n                <Row>\r\n                {currentTrackSearchResult?.items.map((item,pos) => {\r\n                        if(pos < 5) return (\r\n                            <Col sm=\"2\">\r\n                                <Card>\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"100%\"\r\n                                        src={item?.album?.images[0]?.url}\r\n                                        alt=\"Card image\"\r\n                                    />\r\n                                    <CardBody>\r\n                                    <CardTitle tag=\"h5\">{item?.name}</CardTitle>\r\n                                    <CardText>{item?.artists.map(artist => artist.name).join(\", \")}</CardText>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n                {currentArtistSearchResult?.total > 0 &&<h4>Nghệ sĩ</h4>}\r\n                <Row>                   \r\n                    {currentArtistSearchResult?.items.map((item,pos) => {\r\n                        if(pos < 5) return (\r\n                            <Col sm=\"2\">\r\n                                <Card>\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"100%\"\r\n                                        src={item?.images[0]?.url}\r\n                                        alt=\"Card image\"\r\n                                    />\r\n                                    <CardBody>\r\n                                    <CardTitle tag=\"h5\">{item?.name}</CardTitle>\r\n                                    <CardText>Followers: {item?.followers.total}</CardText>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n                {currentAlbumSearchResult?.total > 0 && <h4>Album</h4>}\r\n                <Row>\r\n                    {currentAlbumSearchResult?.items.map((item,pos) => {\r\n                        if(pos < 5) return (\r\n                            <Col sm=\"2\">\r\n                                <Card>\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"100%\"\r\n                                        src={item?.images[0].url}\r\n                                        alt=\"Card image\"\r\n                                    />\r\n                                    <CardBody>\r\n                                    <CardTitle tag=\"h5\">{item?.name}</CardTitle>\r\n                                    <CardText>{item?.artists.map(artist => artist.name).join(\", \")}</CardText>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n                {currentPlaylistSearchResult?.total > 0 && <h4>Playlist</h4>}\r\n                <Row>\r\n                    {currentPlaylistSearchResult?.items.map((item,pos) => {\r\n                        if(pos < 5) return (\r\n                            <Col sm=\"2\">\r\n                                <Card>\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"100%\"\r\n                                        src={item?.images[0]?.url}\r\n                                        alt=\"Card image\"\r\n                                    />\r\n                                    <CardBody>\r\n                                    <CardTitle tag=\"h5\">{item?.name}</CardTitle>\r\n                                    <CardText>Của {item?.owner.display_name}</CardText>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n                {currentShowSearchResult?.total > 0 && <h4>Podcast</h4>}\r\n                <Row>\r\n                    {currentShowSearchResult?.items.map((item,pos) => {\r\n                        if(pos < 5) return (\r\n                            <Col sm=\"2\">\r\n                                <Card>\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"100%\"\r\n                                        src={item?.images[0].url}\r\n                                        alt=\"Card image\"\r\n                                    />\r\n                                    <CardBody>\r\n                                    <CardTitle tag=\"h5\">{item?.name}</CardTitle>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n                {currentEpisodeSearchResult?.total > 0 && <h4>Tập</h4>}\r\n                <Row>\r\n                    {currentEpisodeSearchResult?.items.map((item,pos) => {\r\n                        if(pos < 5) return (\r\n                            <Col sm=\"2\">\r\n                                <Card>\r\n                                    <CardImg\r\n                                        top\r\n                                        width=\"100%\"\r\n                                        src={item?.images[0].url}\r\n                                        alt=\"Card image\"\r\n                                    />\r\n                                    <CardBody>\r\n                                    <CardTitle tag=\"h5\">{item?.name}</CardTitle>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n            </Container>}\r\n            {!searchTermIsExisted && (\r\n            <div>\r\n                <h4>Không tìm thấy kết quả nào</h4>\r\n                <h6>Vui lòng đảm bảo viết đúng chính tả, hoặc sử dụng ít từ khóa hơn hay thử các từ khóa khác</h6>\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Collection.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\HeaderSearchBar.js",["130"],"import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './HeaderSearchBar.css';\r\nimport {useDataLayerValue} from '../contextapi/DataLayer';\r\n\r\nfunction HeaderSearchBar({spotifyApi}) {\r\n    const [{searchTermIsExisted}, dispatch] = useDataLayerValue();\r\n    const handleInput = (event) => {\r\n        spotifyApi.search(event.target.value,['album','artist','playlist','track','show','episode'])\r\n        .then(response => {\r\n            if(response.albums.total === 0 && response.artists.total === 0 && response.episodes.total === 0\r\n                && response.playlists.total === 0 && response.shows.total === 0 && response.tracks.total === 0){\r\n                dispatch({\r\n                    type: 'SET_SEARCH_STATUS',\r\n                    searchTermIsExisted: false\r\n                })\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: 'SET_SEARCH_STATUS',\r\n                    searchTermIsExisted: true\r\n                });\r\n                dispatch({\r\n                    type: 'SET_CURRENT_SEARCH_RESULT',\r\n                    currentAlbumSearchResult: response.albums,\r\n                    currentArtistSearchResult: response.artists,\r\n                    currentEpisodeSearchResult: response.episodes,\r\n                    currentPlaylistSearchResult: response.playlists,\r\n                    currentShowSearchResult: response.shows,\r\n                    currentTrackSearchResult: response.tracks\r\n                })};           \r\n        })\r\n    }\r\n    // console.log('Search object ->',res);\r\n    return (\r\n        <div className=\"headerSearchBar\">\r\n            <SearchIcon />\r\n            <input placeholder=\"Tìm kiếm bài hát, ca sĩ, album,...\" type=\"text\" onKeyUp={handleInput} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderSearchBar\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\CollectionHeader.js",[],"C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Playlists.js",["131"],"import React from 'react';\r\nimport './Playlists.css';\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n  } from \"reactstrap\";\r\n\r\nfunction Playlists() {\r\n    const [{playlists}, dispatch] = useDataLayerValue();\r\n    return (\r\n        <div className=\"playlists\">\r\n            <Container fluid={true}>\r\n                <h4>Playlist</h4>\r\n                <Row>\r\n                    {/* <Col sm=\"4\">\r\n                        <h3>Hello</h3>\r\n                    </Col> */}\r\n                {playlists?.items?.map((item) => (\r\n                    <Col sm=\"2\">\r\n                        <Card>\r\n                            <CardImg\r\n                                top\r\n                                width=\"100%\"\r\n                                src={item.images[0].url}\r\n                                alt=\"Card image\"\r\n                            />\r\n                            <CardBody>\r\n                            <CardTitle tag=\"h5\">{item.name}</CardTitle>\r\n                            <CardText>{item.description}</CardText>\r\n                            {/* <Button>\r\n                                Add to cart\r\n                            </Button> */}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Playlists\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Albums.js",["132"],"import React from 'react';\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n  } from \"reactstrap\";\r\n\r\nfunction Albums() {\r\n    const [{saved_album}, dispatch] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"albums\">\r\n            <Container fluid={true}>\r\n                <h4>Albums</h4>\r\n                <Row>\r\n                {saved_album?.items.map((item) => (\r\n                    <Col sm=\"2\">\r\n                        <Card>\r\n                            <CardImg\r\n                                top\r\n                                width=\"100%\"\r\n                                src={item.album.images[0].url}\r\n                                alt=\"Card image\"\r\n                            />\r\n                            <CardBody>\r\n                            <CardTitle tag=\"h5\">{item.album.name}</CardTitle>\r\n                            <CardText>{item.album.artists.map(artist => artist.name).join(\", \")}</CardText>\r\n                            {/* <Button>\r\n                                Add to cart\r\n                            </Button> */}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Albums\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Artists.js",["133"],"import React from 'react';\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport './Artists.css';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n  } from \"reactstrap\";\r\n\r\nfunction Artists() {\r\n    const [{followed_artists}, dispatch] = useDataLayerValue();\r\n    return (\r\n        <div className=\"artists\">\r\n            <Container fluid={true}>\r\n                <h4>Nghệ sĩ</h4>\r\n                <Row>\r\n                {followed_artists?.artists.items.map((item) => (\r\n                    <Col sm=\"2\">\r\n                        <Card>\r\n                            <CardImg\r\n                                roundedCircle\r\n                                top\r\n                                width=\"100%\"\r\n                                src={item.images[0].url}\r\n                                alt=\"Card image\"\r\n                            />\r\n                            <CardBody>\r\n                            <CardTitle tag=\"h5\">{item.name}</CardTitle>\r\n                            <CardText>Followers: {item.followers.total}</CardText>\r\n                            {/* <Button>\r\n                                Add to cart\r\n                            </Button> */}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Artists\r\n","C:\\Users\\Admin\\LearnReact\\spotify-clone-app\\src\\components\\Podcasts.js",["134"],"import React from 'react';\r\nimport { useDataLayerValue } from '../contextapi/DataLayer';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n  } from \"reactstrap\";\r\n\r\nfunction Podcasts() {\r\n    const [{podcasts},dispatch] = useDataLayerValue();\r\n    return (\r\n        <div className=\"podcasts\">\r\n            <Container fluid={true}>\r\n                <h4>Podcasts</h4>\r\n                <Row>\r\n                {podcasts?.items.map((item) => (\r\n                    <Col sm=\"2\">\r\n                        <Card>\r\n                            <CardImg\r\n                                top\r\n                                width=\"100%\"\r\n                                src={item.show.images[0].url}\r\n                                alt=\"Card image\"\r\n                            />\r\n                            <CardBody>\r\n                            <CardTitle tag=\"h5\">{item.show.name}</CardTitle>\r\n                            <CardText>{item.show.publisher}</CardText>\r\n                            {/* <Button>\r\n                                Add to cart\r\n                            </Button> */}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Podcasts\r\n",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":1,"column":21,"nodeType":"141","messageId":"142","endLine":1,"endColumn":29},{"ruleId":"139","severity":1,"message":"143","line":13,"column":11,"nodeType":"141","messageId":"142","endLine":13,"endColumn":15},{"ruleId":"139","severity":1,"message":"144","line":13,"column":17,"nodeType":"141","messageId":"142","endLine":13,"endColumn":26},{"ruleId":"139","severity":1,"message":"145","line":13,"column":35,"nodeType":"141","messageId":"142","endLine":13,"endColumn":46},{"ruleId":"139","severity":1,"message":"146","line":13,"column":48,"nodeType":"141","messageId":"142","endLine":13,"endColumn":62},{"ruleId":"147","severity":1,"message":"148","line":77,"column":6,"nodeType":"149","endLine":77,"endColumn":8,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"151","line":13,"column":25,"nodeType":"141","messageId":"142","endLine":13,"endColumn":33},{"ruleId":"139","severity":1,"message":"152","line":11,"column":24,"nodeType":"141","messageId":"142","endLine":11,"endColumn":40},{"ruleId":"139","severity":1,"message":"151","line":11,"column":32,"nodeType":"141","messageId":"142","endLine":11,"endColumn":40},{"ruleId":"139","severity":1,"message":"153","line":6,"column":13,"nodeType":"141","messageId":"142","endLine":6,"endColumn":25},{"ruleId":"139","severity":1,"message":"154","line":4,"column":8,"nodeType":"141","messageId":"142","endLine":4,"endColumn":30},{"ruleId":"139","severity":1,"message":"151","line":11,"column":20,"nodeType":"141","messageId":"142","endLine":11,"endColumn":28},{"ruleId":"155","severity":1,"message":"156","line":34,"column":65,"nodeType":"157","messageId":"158","endLine":34,"endColumn":67},{"ruleId":"155","severity":1,"message":"156","line":55,"column":70,"nodeType":"157","messageId":"158","endLine":55,"endColumn":72},{"ruleId":"155","severity":1,"message":"156","line":76,"column":69,"nodeType":"157","messageId":"158","endLine":76,"endColumn":71},{"ruleId":"155","severity":1,"message":"156","line":97,"column":72,"nodeType":"157","messageId":"158","endLine":97,"endColumn":74},{"ruleId":"155","severity":1,"message":"156","line":118,"column":68,"nodeType":"157","messageId":"158","endLine":118,"endColumn":70},{"ruleId":"155","severity":1,"message":"156","line":138,"column":71,"nodeType":"157","messageId":"158","endLine":138,"endColumn":73},{"ruleId":"139","severity":1,"message":"159","line":7,"column":13,"nodeType":"141","messageId":"142","endLine":7,"endColumn":32},{"ruleId":"139","severity":1,"message":"151","line":16,"column":25,"nodeType":"141","messageId":"142","endLine":16,"endColumn":33},{"ruleId":"139","severity":1,"message":"151","line":15,"column":27,"nodeType":"141","messageId":"142","endLine":15,"endColumn":35},{"ruleId":"139","severity":1,"message":"151","line":16,"column":32,"nodeType":"141","messageId":"142","endLine":16,"endColumn":40},{"ruleId":"139","severity":1,"message":"151","line":15,"column":23,"nodeType":"141","messageId":"142","endLine":15,"endColumn":31},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'playlists' is assigned a value but never used.","'saved_album' is assigned a value but never used.","'searchResponse' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["162"],"'dispatch' is assigned a value but never used.","'current_playlist' is assigned a value but never used.","'playingTrack' is assigned a value but never used.","'AccountBoxOutlinedIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'searchTermIsExisted' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},"Update the dependencies array to be: [dispatch]",{"range":"165","text":"166"},[1988,1990],"[dispatch]"]